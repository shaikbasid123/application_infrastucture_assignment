name: Deploy EKS Applications

on:
  push:
    branches: [main]
    paths:
      - 'apps/app1-eks/**'
      - 'apps/app2-eks/**'
      - 'apps/app3-eks/**'

env:
  AWS_REGION: us-east-1
  EKS_CLUSTER_NAME: multi-app-infra-production
  ECR_REGISTRY: ********

jobs:
  build-and-deploy:
    name: Build and Deploy ${{ matrix.app }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker Image
        working-directory: apps/${{ matrix.app }}-eks
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build \
            --tag $ECR_REGISTRY/${{ matrix.app }}:$IMAGE_TAG \
            --tag $ECR_REGISTRY/${{ matrix.app }}:latest \
            --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') \
            --build-arg VCS_REF=${{ github.sha }} \
            --cache-from $ECR_REGISTRY/${{ matrix.app }}:latest \
            .

      - name: Push Image to ECR
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker push $ECR_REGISTRY/${{ matrix.app }}:$IMAGE_TAG
          docker push $ECR_REGISTRY/${{ matrix.app }}:latest

      - name: Configure kubectl
        run: |
          aws eks update-kubeconfig --name ${{ env.EKS_CLUSTER_NAME }} --region ${{ env.AWS_REGION }}
          kubectl version --client

      - name: Update Kubernetes Manifests
        working-directory: apps/${{ matrix.app }}-eks/k8s
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          sed -i "s|IMAGE_TAG|$IMAGE_TAG|g" deployment.yaml
          sed -i "s|ECR_REGISTRY|$ECR_REGISTRY|g" deployment.yaml

      - name: Deploy to EKS
        working-directory: apps/${{ matrix.app }}-eks/k8s
        run: |
          kubectl apply -f namespace.yaml
          kubectl apply -f serviceaccount.yaml
          kubectl apply -f deployment.yaml
          kubectl apply -f service.yaml
          kubectl apply -f ingress.yaml

      - name: Wait for Rollout
        run: |
          kubectl rollout status deployment/${{ matrix.app }} -n production --timeout=5m

      - name: Verify Deployment
        run: |
          kubectl get pods -n production -l app=${{ matrix.app }}
          kubectl get svc -n production -l app=${{ matrix.app }}
          kubectl get ingress -n production

      - name: Run Smoke Tests
        working-directory: apps/${{ matrix.app }}-eks
        run: |
          # Wait for service to be ready
          sleep 30
          
          # Get service endpoint
          ENDPOINT=$(kubectl get ingress -n production -o jsonpath='{.items[0].status.loadBalancer.ingress[0].hostname}')
          echo "Testing endpoint: https://$ENDPOINT"
          
          # Health check
          curl -f -k https://$ENDPOINT/health || exit 1

      - name: Rollback on Failure
        if: failure()
        run: |
          kubectl rollout undo deployment/${{ matrix.app }} -n production
          kubectl rollout status deployment/${{ matrix.app }} -n production --timeout=3m

      - name: Notify Slack
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: 'EKS Deployment: ${{ matrix.app }}'
          fields: repo,message,commit,author
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
