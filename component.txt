1.Networking:
  VPC Setup: A dedicated AWS VPC with public and private subnets. 
              Public subnets will host internet-facing resources like load balancers , while private subnets will secure databases and applications.
  Subnets and Routing: Use NAT gateways for outbound internet access from private subnets.
              Implement VPC peering or VPN for hybrid connectivity to on-premises systems during migration.
  Security Groups and NACLs: Security groups act as stateful firewalls for EC2 instances, and Network Access Control Lists (NACLs) provide stateless perimeter controls at the subnet level.
    
2.Databases:
  Oracle Database: Migrate to an EC2 instance running Oracle on a Windows-based VM. Use AWS Database Migration Service (DMS) for replication and cutover.
  MSSQL Database: Migrate to Amazon RDS for SQL Server, which is a managed service for easier scalability and maintenance.
  Data Protection: Enable encryption at rest using AWS Key Management Service (KMS) and encryption in transit via TLS. Automate backups to Amazon S3 with retention policies.
  
3.Applications:
Three Windows Web Applications: Refactor to run on Windows-based EC2 VMs. These will be placed in private subnets for security.
Two Docker Images: Refactor and deploy as containers in Amazon EKS for orchestration. EKS will handle scaling, load balancing, and high availability.
CI/CD Integration: Use GitHub Actions to build, test, and deploy code. 
            For example, push code to GitHub, trigger a workflow to build Docker images, and deploy to EKS or EC2 via Terraform.

4.Orchestration:
Kubernetes: Orchestrate the Docker containers. EKS clusters will be deployed in private subnets, with node groups for the two Docker applications. 
            Use Kubernetes services for internal load balancing and auto-scaling.
  
5.Security Elements:
Network and Identity Security: Use AWS Identity and Access Management (IAM) for role-based access control. 
            Integrate with AWS Directory Service for Active Directory compatibility. Enforce least privilege and multi-factor authentication (MFA).
Perimeter Controls: Deploy AWS Web Application Firewall (WAF) on Application Load Balancers (ALBs) to protect against common web attacks. 
            Use security groups to restrict inbound traffic.
Monitoring and Incident Response: Use Amazon CloudWatch for real-time monitoring of metrics, logs, and alerts.
            Integrate with AWS GuardDuty for threat detection and set up an incident response plan using AWS Security Hub for centralized security management.
6.Tools and Automation:
Terraform: Write HCL (HashiCorp Configuration Language) scripts to provision VPC, EC2 instances, RDS, EKS, and other resources. 
            This ensures idempotent and repeatable deployments.
GitHub Actions: Create workflows for CI/CD. For instance:
            Build and test Windows applications on EC2.
            Build Docker images and deploy to EKS.
            Example workflow: On code push, run tests, use Terraform to apply infrastructure changes, and deploy via kubectl.
